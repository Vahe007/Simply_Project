generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  name            String    @db.VarChar(255)
  surname         String    @db.VarChar(255)
  email           String    @unique
  password        String    @db.VarChar(255)
  phoneNumber     String?   @db.VarChar(255)
  isLoggedIn      Boolean   @default(false)
  isActive        Boolean   @default(true)
  lastLogin       DateTime
  role            Role      @default(GUEST)
  exhibitsCreated Exhibit[] @relation("creator")
  exhibitsUpdated Exhibit[] @relation("updater")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt
}

model Exhibit {
  id                Int                      @id @default(autoincrement())
  fundNumber        String                   @db.VarChar(255)
  exhibitName       String                   @db.VarChar(255)
  materialId        Int
  material          Material                 @relation(fields: [materialId], references: [id])
  placeOfOrigin     String                   @db.VarChar(255)
  creationPeriod    String                   @db.VarChar(255)
  acquisitionPeriod DateTime
  isActive          Boolean                  @default(true)
  contributors      ContributorsOfExhibits[]
  width             Int?
  height            Int?
  length            Int?
  diameter          Int?
  weight            Int?
  statusId          Int
  status            Status                   @relation(fields: [statusId], references: [id])
  images            Image[]
  recoveries        Recovery[]
  exhibitions       Exhibition[]
  updaterId         Int
  creator           User                     @relation(fields: [creatorId], references: [id], name: "creator", onDelete: Cascade)
  updater           User                     @relation(fields: [updaterId], references: [id], name: "updater", onDelete: Cascade)
  creatorId         Int
  categoryId        Int
  category          Category                 @relation(fields: [categoryId], references: [id])
  description       String?                  @db.Text
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
}

model Image {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  path      String   @db.VarChar(255)
  itemId    Int
  exhibit   Exhibit  @relation(fields: [itemId], references: [id])
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Status {
  id         Int       @id @default(autoincrement())
  statusName String    @unique @db.VarChar(255)
  exhibit    Exhibit[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Material {
  id           Int       @id @default(autoincrement())
  materialName String    @unique @db.VarChar(255)
  exhibit      Exhibit[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Recovery {
  id        Int      @id @default(autoincrement())
  startDate DateTime
  endDate   DateTime
  history   String   @db.Text
  exhibit   Exhibit  @relation(fields: [exhibitId], references: [id])
  exhibitId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contributor {
  id                     Int                      @id @default(autoincrement())
  contributorName        String
  contributorSurname     String
  contributorPhoneNumber String
  exhibits               ContributorsOfExhibits[]
}

model ContributorsOfExhibits {
  id            Int         @id @default(autoincrement())
  contributorId Int
  contributor   Contributor @relation(fields: [contributorId], references: [id])
  exhibitId     Int
  exhibit       Exhibit     @relation(fields: [exhibitId], references: [id])
}

model Exhibition {
  id        Int      @id @default(autoincrement())
  startDate DateTime
  endDate   DateTime
  place     String   @db.VarChar(255)
  headline  String   @db.VarChar(255)
  marks     String?  @db.VarChar(255)
  exhibit   Exhibit  @relation(fields: [itemId], references: [id])
  itemId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  EMPLOYEE
  ADMIN
  GUEST
}

model Category {
  id           Int       @id @default(autoincrement())
  categoryName String
  exhibit      Exhibit[]
}
